# My Docker Webpage on AWS EC2

## 1Ô∏è‚É£ Push Your Project to GitHub

### **Open Your Project in VS Code**
1. Open VS Code.
2. Click **"File" ‚Üí "Open Folder"**.
3. Select your **my-docker-webpage** folder (on Desktop).

### **Initialize Git in VS Code**
1. Click on **"Source Control"** (Ctrl + Shift + G or the Git icon on the left sidebar).
2. Click **"Initialize Repository"**.
3. Now, your files will appear in the "Changes" section.
4. Click **"+" (Stage All Changes)** OR run in the terminal:
   ```sh
   git add .
   ```
5. Write a commit message (e.g., "Initial commit") and click **"‚úî Commit"** OR run:
   ```sh
   git commit -m "Initial commit"
   ```

### **Connect to GitHub**
1. Go to [GitHub](https://github.com/) and **create a new repository** (**my-docker-webpage**).
2. Copy the repository **HTTPS URL**.
3. In VS Code Terminal, run:
   ```sh
   git remote add origin https://github.com/your-username/my-docker-webpage.git
   ```

### **Push Your Code to GitHub**
```sh
   git branch -M main
   git push -u origin main
```

‚úÖ **Done!** Your code is now in GitHub.

## 2Ô∏è‚É£ Install Docker on AWS EC2

### **Launch an AWS EC2 Instance**
1. Go to **AWS Console ‚Üí AWS EC2 Dashboard**.
2. Click **"Launch Instance"**.
3. Select **Ubuntu 22.04 LTS** (or **Amazon Linux 2**).
4. Choose **Instance Type**: `t2.micro` (Free Tier).
5. **Configure Security Group**:
   - Allow **SSH (port 22)** ‚Äì for connecting.
   - Allow **HTTP (port 80)** ‚Äì to serve the webpage.
6. Click **"Launch"**, and download the `.pem` key file (important for SSH access).

### **Connect to Your EC2 Instance**

**On Windows (Using Git Bash):**

1. Navigate to the folder where your `.pem` file is saved:
   ```sh
   cd path/to/your-key.pem
   ```
2. Now, connect to the EC2 instance:
   ```sh
   ssh -i your-key.pem ubuntu@your-ec2-public-ip
   ```
   _(Replace `your-key.pem` with the actual key filename and `your-ec2-public-ip` with the instance's public IP address.)_

### **Install Docker on EC2**
Once connected to your EC2 instance, run these commands:

```sh
sudo apt update
sudo apt install -y docker.io
```

‚úÖ **Verify the installation:**
```sh
docker --version
```
If it prints something like **Docker version 24.0.2**, Docker is installed!

### **Enable Docker to start on boot:**
```sh
sudo systemctl start docker
sudo systemctl enable docker
```

## 3Ô∏è‚É£ Clone Your GitHub Repository on EC2

Now, we need to get your Docker project on EC2. If you haven't pushed your project to GitHub yet, do that first. Then, clone it on EC2:

```sh
sudo apt install -y git
git clone https://github.com/Hemasrijampana/my-docker-webpage.git
cd my-docker-webpage
```

## 4Ô∏è‚É£ Build and Run Your Docker Container on EC2

### **Build the Docker Image:**
```sh
sudo docker build -t my-nginx-webpage .
```

### **Run the Container:**
```sh
sudo docker run -d -p 80:80 my-nginx-webpage
```

## 5Ô∏è‚É£ Verify If the Container Is Running
Run this command to list running containers:
```sh
sudo docker ps
```

## 6Ô∏è‚É£ Access Your Webpage
Now, open your browser and go to:
üëâ **http://your-ec2-public-ip/**

## 7Ô∏è‚É£ Stop and Remove Docker Container

### **Stop the Running Container**
```sh
sudo docker ps
```
Find the **CONTAINER_ID** and stop it:
```sh
sudo docker stop CONTAINER_ID
```
OR, to stop **all running containers**:
```sh
sudo docker stop $(sudo docker ps -q)
```

### **Remove the Container (Optional)**
```sh
sudo docker rm CONTAINER_ID
```
Or remove **all stopped containers**:
```sh
sudo docker rm $(sudo docker ps -aq)
```

### **Stop the Entire Docker Service**
If you want to **completely stop Docker** on your EC2 instance:
```sh
sudo systemctl stop docker
```
To **restart it later**:
```sh
sudo systemctl start docker
```

